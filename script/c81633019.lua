--Identity Crisis
Duel.LoadScript("big_aux.lua")


local s,id=GetID()
function s.initial_effect(c)
	--Activate Skill
	aux.AddSkillProcedure(c,2,false,nil,nil)
	local e1=Effect.CreateEffect(c)
	e1:SetProperty(EFFECT_FLAG_UNCOPYABLE+EFFECT_FLAG_CANNOT_DISABLE)
	e1:SetType(EFFECT_TYPE_FIELD+EFFECT_TYPE_CONTINUOUS)
	e1:SetCode(EVENT_STARTUP)
	e1:SetCountLimit(1)
	e1:SetRange(0x5f)
	e1:SetLabel(0)
	e1:SetOperation(s.op)
	c:RegisterEffect(e1)
end
function s.op(e,tp,eg,ep,ev,re,r,rp)
	if e:GetLabel()==0 then
		local e1=Effect.CreateEffect(e:GetHandler())
		e1:SetType(EFFECT_TYPE_FIELD+EFFECT_TYPE_CONTINUOUS)
		e1:SetCode(EVENT_PREDRAW)
		e1:SetCondition(s.flipcon)
		e1:SetOperation(s.flipop)
		Duel.RegisterEffect(e1,tp)

        local e2=Effect.CreateEffect(e:GetHandler())
		e2:SetType(EFFECT_TYPE_FIELD+EFFECT_TYPE_CONTINUOUS)
		e2:SetCode(EVENT_SUMMON_SUCCESS)
		e2:SetCondition(s.repcon)
		e2:SetOperation(s.repop)
		Duel.RegisterEffect(e2,tp)

        local e3=e2:Clone()
        e3:SetCode(EVENT_SPSUMMON_SUCCESS)
        Duel.RegisterEffect(e3,tp)


        local e4=e2:Clone()
        e4:SetCode(EVENT_FLIP_SUMMON_SUCCESS)
        Duel.RegisterEffect(e4, tp)


	end
	e:SetLabel(1)
end

local levelcards={}
levelcards[1]={99171160,1929294,32274490,27288416,80825553,68140974,16024176,35405755,14957440,13582837,72714392,58695102,57421866,51916853,25533642,79905468,47474172,81951640,75886890,98049915,68167124,78274190,36472900,40640057,57116033,65899613,79279397,92676637,2830693,11548522,12538374,12398280,57769391,67441435,81752019,85457355,96146814,5577149,18789533,4632019,14729426,40380686,51275027,1434352,3657444,7268133,7969770,14198496,18590133,28427869,34659866,40441990,43803845,48868994,52254878,56597272,70410002,72992744,78642798,79538761,79491903,81587028,97631303,86271510,63845230,75198893,87978805,64631466,76815942}
levelcards[2]={92667214,11066358,52550973,89959682,14181608,12482652,42941100,79335209,95511642,47217354,75922381,48519867,90311614,59575539,26157485,2311090,1566817,86993168,23168060,22567609,17932494,46701379,22180094,19113101,28139785,30276969,53855409,27416701,69529567,25716180,76573247,59563768,55702233,82593786,64583600,66288028,17857780,72291078,15198996,83370323,46657337,8201910,80741828,68658728,12061457,16222645,67629977,2694423,40583194,71625222,23434538,33420078,46925518,25034083,13026402,38049541,40867519,3078576,85914562,52430902,30765615,7304544,58518520,3248469,74983881,51196174,55990317,37038993,17994645,62560742,50091196}
levelcards[3]={23635815,74093656,22916281,68505803,42625254,60246171,23898021,57036718,17948378,80925836,89222931,35199656,25795273,97896503,30227494,9637706,83239739,90508760,66500065,36717258,43586926,46609443,57568840,89015998,29834183,6901008,70298454,43426903,22174866,81035362,8910240,71519605,42874792,79853073,29618570,2009101,42463414,49959355,93900406,24087580,39041550,20127343,95443805,6967870,13215230,15394083,52860176,72403299,77087109,80233946,77013169,58589739,10809984,23289281,43739056,61587183,77379481,93445074,15150365,26202165,41872150,88032368,90654356,20586572,17601919,95360850,11390349,57624336,29177818,54959865,3510565,4906301,17955766,3233859,17679043,61681816,66451379,48686504,83602069,15383415,19280589,87257460,89621922,99801464,5519829,79575620,85087012,83903521,26308721,50593156,66436257,17732278,15341821,23205979,82458280,20228463,14558127,52038441,52038442,59438930,60643553,62015408,69764158,73642296,83982270,87319876,36584821,50599453,99414168,92385016,46057733,81846453,15240238,13574687}
levelcards[4]={08806072}
levelcards[5]={43793530,48766543,78060096,35565537,48202661,32012842,46384672,27882993,74388798,12408276,20292186,10852583,70456282,20537097,82482194,40663548,53839837,19153634,21368442,76052811,59380081,35595518,13250922,2356994,18036057,48768179,51644030,82627406,40659562,57579381,65479980,42338879,30778711,55151012,65976795,21250202,41039846,41141943,91862578,60822251,95727991,15464375,74641045,101201101,3111207,6180710,61465001,50400231,13482075,52846880,99427357,81612598,3113836,92731385,49513164,57477163,26273196,66235877,47219274,45231177,81197327,16114248,72959823,85684223,68319538,29981921,94515289,76359406,43385557,76891401,88033975,37706769,77506119,26593852,286392,45298492,77092311,42110604,38148100,40251688,65398390,63364266,53325667,76524506,29143726}
levelcards[6]={70781052,87151205,78984772,340002,6637331,99365553,39357122,77363314,53982768,27383719,12298909,17573739,94944637,85967160,95218695,27354732,53257892,82260502,59023523,9596126,55589254,56931015,4472318,11224103,25551951,77121851,98954375,83274244,50287060,27198001,58363151,23116808,62742651,81059524,35984222,89810518,35960413,56099748,29491334,31178212,34966096,77527210,38033121,40607210,34294855,80513550,44913552,27408609,11449436,20799347,83021423,66690411,68774379,11508758,82971335,35330871,95825679,26674724,4849037,30243636,44665365,48832775,7243511,86274272,11825276,76614340,32775808,99724761,10920352,57594700,21947653,61204971,98927491,16507828,2111707,85545073,33129626,25119460,22160245,35809262,47737087,58859575,52031567,85908279,11765832,7391448,97204936,64635042,5309481,9061682,35252119,98637386,42566602,50321796,21187631,97792247,49565413,70583986,64880894}
levelcards[7]={31447217,42129512,36996508,89943723,74677424,20849090,29424328,65192027,94392192,77797992,87742943,40732515,14989021,71564150,39711336,56619314,78193831,25955164,57046845,26400609,59793705,58554959,48964966,60948488,15744417,98434877,29436665,68304193,73734821,99458769,62701967,68299524,31759689,32909498,62340868,89399912,62503746,12510878,70969517,91512835,90411554,23431858,85679527,5560911,7369217,87564935,78534861,31986288,96227613,22211622,95568112,50263751,61757117,60258960,54752875,82956492,2519690,37057012,43892408,11502550,48996569,55171412,81566151,85507811,93729065,99551425,10383554,41462083,13756293,12307878,18013090,59771339,6568731,43202238,4779823,23874409,32646477,82044279,73580471,98506199,25862681,50065971,50793215}
levelcards[8]={89631139,56649609,13140300,55735315,48579379,85520851,83104731,81497285,57774843,72989439,93717133,15894048,50383626,32543380,99456344,57610714,2347656,61231400,95701283,10532969,63737050,53842431,60681103,11819616,40737112,76039636,85066822,5645210,47297616,64335804,45154513,4722253,53027855,35842855,13959634,76728962,49217579,75713017,82556058,85800949,84565800,80019195,35699,58206034,71438011,61160289,84366728,24413299,52248570,51617185,63487632,16886617,34172284,33331231,34022290,27103517,55125728,92204263,61441708,90488465,61505339,92719314,59900655,43413875,13694209,95679145,81555617,3117804,64681432,31042659,97811903,86327225,5405694,25857246,69123138,16313112,97642679,19025379,72426662,72566043,30086349,86676862,48791583,37818794,84330567,91998119,97165977,90579153,73452089,3642509,74157028,41209828,60461804,6855503,44373896,39823987,72896720,52145422,70902743,25165047,65187687,42216237,76774528,9012916,30757396,23693634,25132288,88643579,44508094,83994433,31385077,83755611,67904682}
levelcards[9]={48770333,29146185,92377303,84257883,97854941,29603180,26866984,14553285,1586457,33022867,33776734,27134689,6150044,3897065,11321089,37663536,11901678,45349196,28226490,54401832,70219023,79864860,17032740,49352945,78512663,90307498,41232647,59353647,18386170,15661378,75286621,52352005,16527176,63422098,3486020,52687916,40908371,3322931,87188910}
levelcards[10]={58054262,10000000,32491822,69890967,32240937,87997872,9822220,51402908,53347303,70335319,58153103,80208158,69133798,88264978,63804806,51402177,95440946,68406755,69456283,24521754,22804410,78371393,99748883,93880808,7634581,10000010,10000020,98777036,66729231,13518809,59913418,86346643,95463814,1546123,39915560,24550676,58601383,59255742,11270236,41685633,14017402,76263644,96220350,69394324,87460579,93483212,27572350,30604579,67098114,89907227,24696097,40139997,86682165}
levelcards[11]={25833572,22073844,27204311,4779091,54135423,21105106,47556396,37169670,82734805,18666161,40939228,41517789,44708154,70980824,39475024,90050480}
levelcards[12]={47027714,63468625,80630522,16802689,82103466,16306932,69815951,95209656,48546368,62873545,37542782,84433295,23995346,84544192,37440988,54702678,50687050,32615065,43378048,26268488,97836203,97489701,26443791,53971455,64193046,17775525,90884403}


function s.validreplacefilter(c, e)
    return c:HasLevel() and c:GetFlagEffect(id)==0 and c:GetOwner()==e:GetHandlerPlayer()
end

function s.repcon(e,tp,eg,ep,ev,re,r,rp)
	return eg:IsExists(s.validreplacefilter, 1, nil, e)
end

function s.repop(e,tp,eg,ep,ev,re,r,rp)
	local c=e:GetHandler()
    Duel.Hint(HINT_CARD,tp,id)

    local tc=eg:GetFirst()
    while tc do
        if s.validreplacefilter(tc, e) then
            local level=tc:GetLevel()
            if level<1 then
                level=1
            end

            if level>12 then
                level=12
            end
            --Debug.Message(levelcards[level][Duel.GetRandomNumber(1,#levelcards[level])])
			tc:Recreate(levelcards[level][Duel.GetRandomNumber(1,#levelcards[level])],nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,true)
            tc:RegisterFlagEffect(id, RESETS_STANDARD, 0, 0)
        end
        
        tc=eg:GetNext()
    end

end






function s.flipcon(e,tp,eg,ep,ev,re,r,rp)
	return Duel.GetCurrentChain()==0 and Duel.GetTurnCount()==1
end
function s.flipop(e,tp,eg,ep,ev,re,r,rp)
	Duel.Hint(HINT_SKILL_FLIP,tp,id|(1<<32))
	Duel.Hint(HINT_CARD,tp,id)

	--start of duel effects go here

	--s.startofdueleff(e,tp,eg,ep,ev,re,r,rp)

	Duel.RegisterFlagEffect(tp,id,0,0,0)
end

function s.startofdueleff(e,tp,eg,ep,ev,re,r,rp)
    --stuff we gotta do

    for _, levelcardsin in ipairs(levelcards) do
        for _,innermostloader in ipairs(levelcardsin) do
            Duel.LoadCardScript(innermostloader)
        end
        
    end

end